import openapiGlue from 'fastify-openapi-glue';
import type { FastifyInstance } from 'fastify';
import { OpenAPIServiceHandlers } from '../handlers';
import { constants } from '../constants/index';
import path from 'node:path';
import { fileURLToPath } from 'node:url';
import fs from 'node:fs';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * OpenAPI Glue Plugin Factory
 * Creates a plugin that integrates fastify-openapi-glue with the existing backend template
 */
export const openapiGluePlugin = (app: FastifyInstance) => {
  // Use the OpenAPI specification generated by the workflow
  const specificationPath = path.join(
    __dirname,
    '../../../shared/openapi_spec_0.yaml'
  );

  return {
    name: 'openapi-glue',
    specificationPath,
    async register() {
      // Handle missing/empty OpenAPI spec gracefully
      try {
        // Check if OpenAPI spec file exists and is not empty
        if (!fs.existsSync(specificationPath)) {
          app.log.warn(
            'OpenAPI spec file not found, skipping fastify-openapi-glue registration'
          );
          app.log.warn(`Expected file: ${specificationPath}`);
          app.log.warn(
            'OpenAPI routes will be available after workflow generates the specification'
          );
          return;
        }

        const specContent = fs.readFileSync(specificationPath, 'utf8');
        if (!specContent.trim()) {
          app.log.warn(
            'OpenAPI spec file is empty, skipping fastify-openapi-glue registration'
          );
          app.log.warn(
            'OpenAPI routes will be available after workflow generates the specification'
          );
          return;
        }

        // Create service handlers instance with access to decorated services
        const serviceHandlers = new OpenAPIServiceHandlers(app.services);

        // Register fastify-openapi-glue with our configuration
        await app.register(openapiGlue, {
          specification: specificationPath,
          serviceHandlers: serviceHandlers,
          prefix: constants.API_PREFIX,
          addEmptySchema: true, // Allow empty response bodies for 204 responses
        });

        app.log.info('fastify-openapi-glue registered successfully');
        app.log.info(`Using OpenAPI spec: ${specificationPath}`);
      } catch (error) {
        app.log.error({ error }, 'Failed to register fastify-openapi-glue');
        app.log.warn(
          'Continuing without OpenAPI routes - they will be available after workflow runs'
        );
      }
    },
  };
};
